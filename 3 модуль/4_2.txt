#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <unistd.h>

#define MAX_LENGTH 50

typedef struct Contact {
    char firstName[MAX_LENGTH];
    char lastName[MAX_LENGTH];
    char phoneNumber[MAX_LENGTH];
    char email[MAX_LENGTH];
    char workplace[MAX_LENGTH];
    struct Contact* next;
    struct Contact* prev;
} Contact;

Contact* head = NULL;
int sem_id;

void signal_handler(int sig) {
    if (sig == SIGUSR1) {
        printf("Parent process is modifying the file. Access is blocked.\n");
        struct sembuf sem_op = {0, -1, 0};
        semop(sem_id, &sem_op, 1); // Уменьшаем значение семафора
    } else if (sig == SIGUSR2) {
        printf("Parent process has completed modifying the file. Access is granted.\n");
        struct sembuf sem_op = {0, 1, 0};
        semop(sem_id, &sem_op, 1); // Увеличиваем значение семафора
    }
}

void read_contacts_from_file() {
    FILE *file = fopen("contacts.txt", "r");
    if (!file) {
        perror("Error opening file");
        exit(1);
    }

    char line[MAX_LENGTH];
    while(fgets(line, sizeof(line), file)) {
        Contact* newContact = malloc(sizeof(Contact));
        sscanf(line, "%s %s %s %s %s", newContact->firstName, newContact->lastName, newContact->phoneNumber, newContact->email, newContact->workplace);
        newContact->next = head;
        if (head != NULL) {
            head->prev = newContact;
        }
        head = newContact;
    }

    fclose(file);
}

void write_contacts_to_file() {
    FILE *file = fopen("contacts.txt", "w");
    if (!file) {
        perror("Error opening file");
        exit(1);
    }

    Contact* current = head;
    while (current != NULL) {
        fprintf(file, "%s %s %s %s %s\n", current->firstName, current->lastName, current->phoneNumber, current->email, current->workplace);
        current = current->next;
    }

    fclose(file);
}

int main() {
    key_t key = ftok("contacts.txt", 'S');
    sem_id = semget(key, 1, IPC_CREAT | 0666);
    semctl(sem_id, 0, SETVAL, 1); // Устанавливаем начальное значение семафора

    signal(SIGUSR1, signal_handler);
    signal(SIGUSR2, signal_handler);

    read_contacts_from_file();

    // Родительский процесс может начать модифицировать файл
    kill(getpid(), SIGUSR1);

    // Модификация файла
    // example modification: adding a new contact
    Contact* newContact = malloc(sizeof(Contact));
    strcpy(newContact->firstName, "John");
    strcpy(newContact->lastName, "Doe");
    strcpy(newContact->phoneNumber, "1234567890");
    strcpy(newContact->email, "john.doe@example.com");
    strcpy(newContact->workplace, "Company");
    newContact->next = head;
    if (head != NULL) {
        head->prev = newContact;
    }
    head = newContact;

    // Родительский процесс завершил модификацию файла
    kill(getpid(), SIGUSR2);

    // Дочерний процесс отправляет новое число родительскому
    // В данном случае, просто пример числа 42
    kill(getppid(), SIGUSR1);
    kill(getpid(), 42);

    // Выводим все контакты
    Contact* current = head;
    while (current != NULL) {
        printf("%s %s %s %s %s\n", current->firstName, current->lastName, current->phoneNumber, current->email, current->workplace);
        current = current->next;
    }

    write_contacts_to_file();

    semctl(sem_id, 0, IPC_RMID); // Удаляем семафор

    return 0;
}
